# Copyright (C) 2019-2021 Intel Corporation
#
# SPDX-License-Identifier: MIT

import json
import logging as log
import os
import os.path as osp
import shutil
import tempfile
import unittest.mock
from contextlib import ExitStack
from enum import Enum
from typing import Dict, List, Optional, Tuple, Union

import networkx as nx
import ruamel.yaml as yaml

from datumaro.components.config import Config
from datumaro.components.config_model import (BuildStage, PipelineConfig,
    ProjectLayout, Source, TreeConfig, TreeLayout)
from datumaro.components.dataset import DEFAULT_FORMAT, Dataset, IDataset
from datumaro.components.environment import Environment
from datumaro.components.errors import (DatasetMergeError, DatumaroError,
    EmptyPipelineError, MismatchingObjectError, MissingObjectError,
    MissingPipelineHeadError, MultiplePipelineHeadsError, ProjectAlreadyExists,
    ProjectNotFoundError, ReadonlyDatasetError, SourceExistsError,
    UnknownRefError, UnknownStageError, VcsError, UnsavedChangesError)
from datumaro.util import find, parse_str_enum_value
from datumaro.util.log_utils import catch_logs, logging_disabled
from datumaro.util.os_util import generate_next_name, make_file_name, rmtree


class ProjectSourceDataset(Dataset):
    @classmethod
    def load(cls, path: str, tree: 'Tree',
            source: str, readonly: bool = False) -> 'ProjectSourceDataset':
        config = tree.sources[source]

        dataset = cls.import_from(path, env=tree.env,
            format=config.format, **config.options)
        dataset._tree = tree
        dataset._config = config
        dataset._readonly = readonly
        dataset.name = source
        return dataset

    def save(self, save_dir=None, **kwargs):
        if save_dir is None and self.readonly:
            raise ReadonlyDatasetError("Can't update a read-only dataset")
        super().save(save_dir, **kwargs)

    @property
    def readonly(self):
        return not self._readonly and self.is_bound

    @property
    def _env(self):
        return self._tree.env

    @property
    def config(self):
        return self._config

    def run_model(self, model, batch_size=1):
        if isinstance(model, str):
            model = self._tree.models.make_executable_model(model)
        return super().run_model(model, batch_size=batch_size)


IgnoreMode = Enum('IgnoreMode', ['rewrite', 'append', 'remove'])

def _update_ignore_file(paths: List[str], repo_root: str, filepath: str,
        mode: Optional[IgnoreMode] = None):
    def _make_ignored_path(path):
        path = osp.join(repo_root, osp.normpath(path))
        assert path.startswith(repo_root), path
        return osp.relpath(path, repo_root)

    header = '# The file is autogenerated by Datumaro'

    mode = parse_str_enum_value(mode, IgnoreMode, IgnoreMode.append)
    paths = {osp.join(repo_root, osp.normpath(p)): _make_ignored_path(p)
        for p in paths}

    openmode = 'r+'
    if not osp.isfile(filepath):
        openmode = 'w+' # r+ cannot create, w+ truncates
    with open(filepath, openmode) as f:
        lines = []
        if mode in {IgnoreMode.append, IgnoreMode.remove}:
            for line in f:
                lines.append(line.strip())
            f.seek(0)

        new_lines = []
        for line in lines:
            line_path = osp.join(repo_root,
                osp.normpath(line.split('#', maxsplit=1)[0]).lstrip('/'))
            if not line_path:
                new_lines.append(line)
                continue

            if mode == IgnoreMode.append:
                if line_path in paths:
                    paths.pop(line_path)
                new_lines.append(line)
            elif mode == IgnoreMode.remove:
                if line_path in paths:
                    paths.pop(line_path)

        if mode in { IgnoreMode.rewrite, IgnoreMode.append }:
            new_lines.extend(paths.values())

        if not new_lines or new_lines[0] != header:
            f.write(header + '\n')
        f.writelines('\n'.join(new_lines))
        f.truncate()

class CrudProxy:
    @property
    def _data(self):
        raise NotImplementedError()

    def __len__(self):
        return len(self._data)

    def __getitem__(self, name):
        return self._data[name]

    def get(self, name, default=None):
        return self._data.get(name, default)

    def __iter__(self):
        return iter(self._data.keys())

    def items(self):
        return iter(self._data.items())

    def __contains__(self, name):
        return name in self._data

class _DataSourceBase(CrudProxy):
    def __init__(self, project, config_field):
        self._project = project
        self._field = config_field

    @CrudProxy._data.getter
    def _data(self):
        return self._project.config[self._field]

    def add(self, name, value):
        if name in self:
            raise SourceExistsError("Source '%s' already exists" % name)

        return self._data.set(name, value)

    def remove(self, name):
        self._data.remove(name)

class ProjectModels(_DataSourceBase):
    def __init__(self, project):
        super().__init__(project, 'models')

    def __getitem__(self, name):
        try:
            return super().__getitem__(name)
        except KeyError:
            raise KeyError("Unknown model '%s'" % name)

    def work_dir(self, name):
        return osp.join(
            self._project.config.project_dir,
            self._project.config.env_dir,
            self._project.config.models_dir, name)

    def make_executable_model(self, name):
        model = self[name]
        return self._project.env.make_launcher(model.launcher,
            **model.options, model_dir=self.work_dir(name))

class ProjectSources(_DataSourceBase):
    def __init__(self, project):
        super().__init__(project, 'sources')

    def __getitem__(self, name):
        try:
            return super().__getitem__(name)
        except KeyError:
            raise KeyError("Unknown source '%s'" % name)


BuildStageType = Enum('BuildStageType',
    ['source', 'project', 'transform', 'filter', 'convert', 'inference'])

class Pipeline:
    @staticmethod
    def _create_graph(config: PipelineConfig):
        graph = nx.DiGraph()
        for entry in config:
            target_name = entry['name']
            parents = entry['parents']
            target = BuildStage(entry['config'])

            graph.add_node(target_name, config=target)
            for prev_stage in parents:
                graph.add_edge(prev_stage, target_name)

        return graph

    def __init__(self, config: PipelineConfig = None):
        self._head = None

        if config is not None:
            self._graph = self._create_craph(config)
            if not self.head:
                raise MissingPipelineHeadError()
        else:
            self._graph = nx.DiGraph()

    def __getattr__(self, key):
        notfound = object()
        obj = getattr(self._graph, key, notfound)
        if obj is notfound:
            raise AttributeError(key)
        return obj

    @staticmethod
    def _find_head_node(graph) -> Optional[str]:
        head = None
        for node in graph.nodes:
            if graph.out_degree(node) == 0:
                if head is not None:
                    raise MultiplePipelineHeadsError(
                        "A pipeline can have only one " \
                        "main target, but it has at least 2: %s, %s" % \
                        (head, node))
                head = node
        return head

    @property
    def head(self):
        if self._head is None:
            self._head = self._find_head_node(self._graph)
        return self._head

    @property
    def head_node(self):
        return self._graph.nodes[self.head]

    @staticmethod
    def _serialize(graph) -> PipelineConfig:
        serialized = PipelineConfig()
        for node_name, node in graph.nodes.items():
            serialized.nodes.append({
                'name': node_name,
                'parents': list(graph.predecessors(node_name)),
                'config': dict(node['config']),
            })
        return serialized

    @staticmethod
    def _get_subgraph(graph, target):
        target_parents = set()
        visited = set()
        to_visit = {target}
        while to_visit:
            current = to_visit.pop()
            visited.add(current)
            for pred in graph.predecessors(current):
                target_parents.add(pred)
                if pred not in visited:
                    to_visit.add(pred)

        target_parents.add(target)

        return graph.subgraph(target_parents)

    def get_slice(self, target) -> 'Pipeline':
        pipeline = Pipeline()
        pipeline._graph = self._get_subgraph(self._graph, target)
        return pipeline

class ProjectBuilder:
    def __init__(self, project: 'Project', tree: 'Tree'):
        self._project = project
        self._tree = tree

    def make_dataset(self, pipeline) -> IDataset:
        dataset = self._get_resulting_dataset(pipeline)

        # need to save and load, because it can modify dataset,
        # unless we work with the internal format
        # save_in_cache(project, pipeline) # update and check hash in config!
        # dataset = load_dataset(project, pipeline)

        return dataset

    def _run_pipeline(self, pipeline):
        missing_sources, wd_hashes = self._find_missing_sources(pipeline)
        for s in missing_sources:
            target, stage = ProjectBuildTargets.split_target_name(s)
            assert not stage or stage == ProjectBuildTargets.BASE_STAGE, s
            source = self._tree.sources[target]

            assert source.hash, target
            with self._project._make_tmp_dir() as tmp_dir:
                conf, _, _ = \
                    self._project._download_source(target, source.url, tmp_dir)

                if source.hash != conf['hash']:
                    raise MismatchingObjectError(
                        "Downloaded source '%s' data is different " \
                        "from what is saved in the build pipeline: "
                        "'%s' vs '%s'" % (s, conf['hash'], source.hash))

        return self._init_pipeline(pipeline, working_dir_hashes=wd_hashes)

    def _get_resulting_dataset(self, pipeline):
        graph, head = self._run_pipeline(pipeline)
        return graph.nodes[head]['dataset']

    def _stage_data_dir(self, stage: str) -> str:
        target, stage = ProjectBuildTargets.split_target_name(stage)
        stage_hash = self._tree.build_targets[target].get_stage(stage).hash

        if self._tree.is_working_tree and \
                target in self._tree.sources and \
                stage == self._tree.build_targets[target].head.name:
            return self._project.source_data_dir(target)

        if stage_hash and self._project.is_obj_cached(stage_hash):
            return self._project.cache_path(stage_hash)

        return None

    def _init_pipeline(self, pipeline, working_dir_hashes=None):
        def _join_parent_datasets(force=False):
            parents = { p: graph.nodes[p] for p in initialized_parents }

            if 1 < len(parents) or force:
                try:
                    dataset = Dataset.from_extractors(
                        *(p['dataset'] for p in parents.values()),
                        env=self._tree.env)
                except DatasetMergeError as e:
                    e.sources = set(parents)
                    raise e
            else:
                dataset = next(iter(parents.values()))['dataset']

            # clear fully utilized datasets to release memory
            for p_name, p in parents.items():
                p['_use_count'] = p.get('_use_count', 0) + 1

                if p_name != head and p['_use_count'] == graph.out_degree(p_name):
                    p.pop('dataset')

            return dataset

        if working_dir_hashes is None:
            working_dir_hashes = {}
        def _try_load_from_cache(current_name, current) -> Dataset:
            # Check if we can restore this stage from the cache or
            # from the working directory.
            #
            # If we have a hash, we have executed this stage already
            # and can have a cache entry or,
            # if this is the last stage of a target in the working tree,
            # we can use data from the working directory.
            obj_hash = current['config'].hash

            data_dir = None
            cached = False

            target = ProjectBuildTargets.strip_target_name(current_name)
            if self._tree.is_working_tree and target in self._tree.sources:
                data_dir = self._project.source_data_dir(target)

                wd_hash = working_dir_hashes.get(target)
                if not wd_hash:
                    if osp.isdir(data_dir):
                        wd_hash = self._project._refresh_source_hash(target)
                        working_dir_hashes[target] = wd_hash
                    else:
                        log.debug("Build: skipping checking working dir '%s', "
                            "because it does not exist", data_dir)
                        data_dir = None

                if obj_hash != wd_hash:
                    log.debug("Build: skipping loading stage '%s' from "
                        "working dir '%s', because hashes does not match",
                        current_name, data_dir)
                    data_dir = None

            if not data_dir:
                if self._project._is_cached(obj_hash):
                    data_dir = self._project.cache_path(obj_hash)
                    cached = True
                elif self._project._can_retrieve_from_vcs_cache(obj_hash):
                    data_dir = self._project._materialize_obj(obj_hash)
                    cached = True

                if not data_dir or not osp.isdir(data_dir):
                    log.debug("Build: skipping loading stage '%s' from "
                        "cache obj '%s', because it is not available",
                        current_name, obj_hash)
                    return None

            if data_dir:
                assert osp.isdir(data_dir), data_dir
                log.debug("Build: loading stage '%s' from '%s'",
                    current_name, data_dir)
                return ProjectSourceDataset.load(
                    data_dir, self._tree, target, readonly=cached)

            return None


        graph = pipeline._graph
        if len(graph) == 0:
            raise EmptyPipelineError()

        head = pipeline.head
        if not head:
            raise MissingPipelineHeadError()

        # traverse the graph and initialize nodes from sources to the head
        to_visit = [head]
        while to_visit:
            current_name = to_visit.pop()
            current = graph.nodes[current_name]

            assert current.get('dataset') is None

            obj_hash = current['config'].hash
            if obj_hash:
                dataset = _try_load_from_cache(current_name, current)
                if dataset is not None:
                    current['dataset'] = dataset
                    continue

            uninitialized_parents = []
            initialized_parents = []
            if graph.in_degree(current_name) == 0:
                assert current['config'].type == 'source', current['config'].type
                source = self._tree.sources[
                    self._tree.build_targets.strip_target_name(current_name)]
                if not source.is_generated:
                    # source is missing in the cache and cannot be retrieved
                    # it is assumed that all the sources were downloaded earlier
                    raise MissingObjectError("Failed to load target '%s': "
                        "obj '%s' was not found in cache" % \
                        (current_name, obj_hash))
            else:
                for p_name in graph.predecessors(current_name):
                    parent = graph.nodes[p_name]
                    if parent.get('dataset') is None:
                        uninitialized_parents.append(p_name)
                    else:
                        initialized_parents.append(p_name)

                if uninitialized_parents:
                    to_visit.append(current_name)
                    to_visit.extend(uninitialized_parents)
                    continue

            type_ = BuildStageType[current['config'].type]
            params = current['config'].params
            if type_ == BuildStageType.transform:
                kind = current['config'].kind
                try:
                    transform = self._tree.env.transforms[kind]
                except KeyError:
                    raise UnknownStageError("Unknown transform '%s'" % kind)

                dataset = _join_parent_datasets()
                dataset = dataset.transform(transform, **params)

            elif type_ == BuildStageType.filter:
                dataset = _join_parent_datasets()
                dataset = dataset.filter(**params)

            elif type_ == BuildStageType.inference:
                kind = current['config'].kind
                model = self._tree.models.make_executable_model(kind)

                dataset = _join_parent_datasets()
                dataset = dataset.run_model(model)

            elif type_ == BuildStageType.source:
                assert len(initialized_parents) == 0, current_name

                # The only valid situation we get here is that it is a
                # generated source:
                # - No cache entry
                # - No local dir data
                source_name = ProjectBuildTargets.strip_target_name(current_name)
                source = self._tree.sources[source_name]
                if not source.is_generated:
                    raise MissingObjectError("Can't initialize stage '%s': "
                        "source data is not available" % current_name)

                if self._tree.is_working_tree:
                    source_dir = self._project.source_data_dir(source_name)
                else:
                    source_dir = None
                dataset = ProjectSourceDataset.load(source_dir, self._tree,
                    source_name, readonly=not source_dir)

            elif type_ == BuildStageType.project:
                dataset = _join_parent_datasets(force=True)

            elif type_ == BuildStageType.convert:
                dataset = _join_parent_datasets()

            else:
                raise UnknownStageError("Unknown stage type '%s'" % type_)

            current['dataset'] = dataset

        return graph, head

    def _find_missing_sources(self, pipeline: Pipeline):
        work_dir_hashes = {}
        def _can_retrieve(target, conf):
            obj_hash = conf.hash

            target = ProjectBuildTargets.strip_target_name(target)
            if self._tree.is_working_tree and target in self._tree.sources:
                data_dir = self._project.source_data_dir(target)

                wd_hash = work_dir_hashes.get(target)
                if not wd_hash:
                    if not osp.isdir(data_dir):
                        return False

                    wd_hash = self._project._refresh_source_hash(target)
                    work_dir_hashes[target] = wd_hash

                if obj_hash != wd_hash:
                    return False

            if obj_hash and self._project.is_obj_cached(obj_hash):
                return True

            return False

        missing_sources = set()
        checked_deps = set()
        missing_deps = [pipeline.head]
        while missing_deps:
            t = missing_deps.pop()
            if t in checked_deps:
                continue

            t_conf = pipeline._graph.nodes[t]['config']

            if not _can_retrieve(t, t_conf):
                if pipeline._graph.in_degree(t) == 0:
                    assert t_conf.type == 'source', t_conf.type
                    source = self._tree.sources[
                        self._tree.build_targets.strip_target_name(t)]
                    if not source.is_generated:
                        missing_sources.add(t)
                else:
                    for p in pipeline._graph.predecessors(t):
                        if p not in checked_deps:
                            missing_deps.append(p)
                    continue

            checked_deps.add(t)
        return missing_sources, work_dir_hashes

class ProjectBuildTargets(CrudProxy):
    MAIN_TARGET = 'project'
    BASE_STAGE = 'root'

    def __init__(self, tree: 'Tree'):
        self._tree = tree

    @CrudProxy._data.getter
    def _data(self):
        data = self._tree.config.build_targets

        if self.MAIN_TARGET not in data:
            data[self.MAIN_TARGET] = {
                'stages': [
                    BuildStage({
                        'name': self.BASE_STAGE,
                        'type': BuildStageType.project.name,
                    }),
                ]
            }

        for source in self._tree.sources:
            if source not in data:
                data[source] = {
                    'stages': [
                        BuildStage({
                            'name': self.BASE_STAGE,
                            'type': BuildStageType.source.name,
                        }),
                    ]
                }

        return data

    def __contains__(self, key):
        if '.' in key:
            target, stage = self.split_target_name(key)
            return target in self._data and \
                self._data[target].find_stage(stage) is not None
        return key in self._data

    def add_target(self, name):
        return self._data.set(name, {
            'stages': [
                BuildStage({
                    'name': self.BASE_STAGE,
                    'type': BuildStageType.source.name,
                }),
            ]
        })

    def add_stage(self, target, value, prev=None, name=None) -> str:
        target_name = target
        target_stage_name = None
        if '.' in target:
            target_name, target_stage_name = self.split_target_name(target)

        if prev is None:
            prev = target_stage_name

        target = self._data[target_name]

        if prev:
            prev_stage = find(enumerate(target.stages),
                lambda e: e[1].name == prev)
            if prev_stage is None:
                raise KeyError("Can't find stage '%s'" % prev)
            prev_stage = prev_stage[0]
        else:
            prev_stage = len(target.stages) - 1

        name = value.get('name') or name
        if not name:
            name = generate_next_name((s.name for s in target.stages),
                value['type'], sep='-')
        else:
            if target.find_stage(name):
                raise VcsError("Stage '%s' already exists" % name)
        value['name'] = name

        value = BuildStage(value)
        assert BuildStageType[value.type]
        target.stages.insert(prev_stage + 1, value)

        return self.make_target_name(target_name, name)

    def remove_target(self, name: str):
        assert name != self.MAIN_TARGET, "Can't remove the main target"
        self._data.remove(name)

    def remove_stage(self, target: str, name: str):
        assert name not in {self.BASE_STAGE}, "Can't remove a default stage"

        target = self._data[target]
        idx = find(enumerate(target.stages), lambda e: e[1].name == name)
        if idx is None:
            raise KeyError("Can't find stage '%s'" % name)
        target.stages.remove(idx)

    def add_transform_stage(self, target: str, transform: str,
            params: Optional[Dict] = None, name: Optional[str] = None):
        if not transform in self._tree.env.transforms:
            raise KeyError("Unknown transform '%s'" % transform)

        return self.add_stage(target, {
            'type': BuildStageType.transform.name,
            'kind': transform,
            'params': params or {},
        }, name=name)

    def add_inference_stage(self, target: str, model: str,
            params: Optional[Dict] = None, name: Optional[str] = None):
        if not model in self._tree.config.models:
            raise KeyError("Unknown model '%s'" % model)

        return self.add_stage(target, {
            'type': BuildStageType.inference.name,
            'kind': model,
            'params': params or {},
        }, name=name)

    def add_filter_stage(self, target: str, expr: str,
            params: Optional[Dict] = None, name: Optional[str] = None):
        params = params or {}
        params['expr'] = expr
        return self.add_stage(target, {
            'type': BuildStageType.filter.name,
            'params': params,
        }, name=name)

    def add_convert_stage(self, target: str, format: str, \
            params: Optional[Dict] = None, name: Optional[str] = None): # pylint: disable=redefined-builtin
        if not self._tree.env.is_format_known(format):
            raise KeyError("Unknown format '%s'" % format)

        return self.add_stage(target, {
            'type': BuildStageType.convert.name,
            'kind': format,
            'params': params or {},
        }, name=name)

    @staticmethod
    def make_target_name(target: str, stage: Optional[str] = None) -> str:
        if stage:
            return '%s.%s' % (target, stage)
        return target

    @classmethod
    def split_target_name(cls, name: str) -> Tuple[str, str]:
        if '.' in name:
            target, stage = name.split('.', maxsplit=1)
            if not target:
                raise ValueError("Wrong build target name '%s': "
                    "a name can't be empty" % name)
            if not stage:
                raise ValueError("Wrong build target name '%s': "
                    "expected stage name after the separator" % name)
        else:
            target = name
            stage = cls.BASE_STAGE
        return target, stage

    @classmethod
    def strip_target_name(cls, name: str) -> str:
        return cls.split_target_name(name)[0]

    def _make_full_pipeline(self) -> Pipeline:
        pipeline = Pipeline()
        graph = pipeline._graph
        for target_name, target in self.items():
            if target_name == self.MAIN_TARGET:
                # main target combines all the others
                prev_stages = [self.make_target_name(n, t.head.name)
                    for n, t in self.items() if n != self.MAIN_TARGET]
            else:
                prev_stages = [self.make_target_name(t, self[t].head.name)
                    for t in target.parents]

            for stage in target.stages:
                stage_name = self.make_target_name(target_name, stage['name'])
                graph.add_node(stage_name, config=stage)
                for prev_stage in prev_stages:
                    graph.add_edge(prev_stage, stage_name)
                prev_stages = [stage_name]

        return pipeline

    def make_pipeline(self, target) -> Pipeline:
        # a subgraph with all the target dependencies
        if '.' not in target:
            target = self.make_target_name(target, self[target].head.name)

        return self._make_full_pipeline().get_slice(target)

class GitWrapper:
    @staticmethod
    def import_module():
        import git
        return git

    try:
        module = import_module.__func__()
    except ImportError:
        module = None

    def _git_dir(self):
        return osp.join(self._project_dir, '.git')

    def __init__(self, project_dir, repo=None):
        self._project_dir = project_dir
        self.repo = repo

        if repo is None and \
                osp.isdir(project_dir) and osp.isdir(self._git_dir()):
            self.repo = self.module.Repo(project_dir)

    @property
    def initialized(self):
        return self.repo is not None

    def init(self):
        if self.initialized:
            return

        repo = self.module.Repo.init(path=self._project_dir)
        repo.config_writer() \
            .set_value("user", "name", "User") \
            .set_value("user", "email", "<>") \
            .release()
        # gitpython does not support init, use git directly
        repo.git.init()

        self.repo = repo

    @property
    def refs(self) -> List[str]:
        return [t.name for t in self.repo.refs]

    @property
    def tags(self) -> List[str]:
        return [t.name for t in self.repo.tags]

    def push(self, remote=None):
        args = [remote] if remote else []
        remote = self.repo.remote(*args)
        branch = self.repo.head.ref.name
        if not self.repo.head.ref.tracking_branch():
            self.repo.git.push('--set-upstream', remote, branch)
        else:
            remote.push(branch)

    def pull(self, remote=None):
        args = [remote] if remote else []
        return self.repo.remote(*args).pull()

    def check_updates(self, remote=None) -> List[str]:
        args = [remote] if remote else []
        remote = self.repo.remote(*args)
        prev_refs = {r.name: r.commit.hexsha for r in remote.refs}
        remote.update()
        new_refs = {r.name: r.commit.hexsha for r in remote.refs}
        updated_refs = [(prev_refs.get(n), new_refs.get(n))
            for n, _ in (set(prev_refs.items()) ^ set(new_refs.items()))]
        return updated_refs

    def fetch(self, remote=None):
        args = [remote] if remote else []
        self.repo.remote(*args).fetch()

    def tag(self, name):
        self.repo.create_tag(name)

    def checkout(self, ref=None, paths=None, dst_dir=None):
        commit = self.repo.commit(ref)

        tree = commit.tree

        if not dst_dir:
            dst_dir = self._project_dir

        repo_dir = osp.abspath(self._project_dir)
        dst_dir = osp.abspath(dst_dir)
        if dst_dir.startswith(repo_dir):
            cmp_base = osp.relpath(dst_dir, repo_dir)
            conflicts = []
            for obj in tree.traverse():
                if obj.type != 'blob':
                    continue

                file_path = osp.join(dst_dir, obj.path)
                file_rel_path = osp.normpath(osp.join(cmp_base, obj.path))

                # The statuses are:
                # - "A" for added paths
                # - "D" for deleted paths
                # - "R" for renamed paths
                # - "M" for paths with modified data
                # - "T" for changed in the type paths
                #
                # Only modified files produce conflicts in checkout
                if not osp.isfile(file_path):
                    continue
                status = self.repo.git.diff('--name-status',
                    self.repo.index.entries[(obj.path, 0)].hexsha, file_path)
                if status:
                    status = status[0]
                assert status in {'', 'M'}, status

                if status == 'M':
                    conflicts.append(file_rel_path)

            if conflicts:
                raise UnsavedChangesError(conflicts)


        if not paths:
            self.repo.head.reference = commit

        self.write_tree(tree, dst_dir, include_files=paths)

    def add(self, paths, base=None): # pylint: disable=redefined-builtin
        """
        Adds paths to index.
        Paths can be truncated relatively to base.
        """

        path_rewriter = None
        if base:
            base = osp.abspath(base)
            repo_root = osp.abspath(self._project_dir)
            assert base.startswith(repo_root), "Base should be inside of the repo"
            base = base[len(repo_root) + len(osp.sep) : ]
            path_rewriter = lambda entry: osp.relpath(entry.path, base)

        if isinstance(paths, str):
            paths = [paths]

        # A workaround for path_rewriter incompatibility
        # with directory paths expansion
        paths_to_add = []
        for path in paths:
            if not osp.isdir(path):
                paths_to_add.append(path)
                continue

            for d, _, filenames in os.walk(path):
                for fn in filenames:
                    paths_to_add.append(osp.join(d, fn))

        self.repo.index.add(paths_to_add, path_rewriter=path_rewriter)

    def commit(self, message) -> str:
        """
        Creates a new revision from index.
        Returns: new revision hash.
        """
        return self.repo.index.commit(message).hexsha

    def status(self):
        # R[everse] flag is needed for index to HEAD comparison
        # to avoid inversed output in gitpython, which adds this flag
        # git diff --cached HEAD [not not R]
        diff = self.repo.index.diff(R=True)
        return {
            osp.relpath(d.a_rawpath.decode(), self._project_dir): d.change_type
            for d in diff
        }

    def list_remotes(self):
        return { r.name: r.url for r in self.repo.remotes }

    def add_remote(self, name, url):
        self.repo.create_remote(name, url)

    def remove_remote(self, name):
        self.repo.delete_remote(name)

    def is_ref(self, rev):
        try:
            self.repo.commit(rev)
            return True
        except (ValueError, self.module.exc.BadName):
            return False

    def has_commits(self):
        return self.is_ref('HEAD')

    def show(self, path, rev=None):
        return self.repo.git.show('%s:%s' % (rev or '', path))

    def get_tree(self, ref):
        return self.repo.tree(ref)

    def write_tree(self, tree, base_path: str,
            include_files: Optional[List[str]] = None):
        os.makedirs(base_path, exist_ok=True)

        for obj in tree.traverse(visit_once=True):
            if include_files and obj.path not in include_files:
                continue

            path = osp.join(base_path, obj.path)
            os.makedirs(osp.dirname(path), exist_ok=True)
            if obj.type == 'blob':
                with open(path, 'wb') as f:
                    obj.stream_data(f)
            elif obj.type == 'tree':
                pass
            else:
                raise ValueError("Unexpected object type in a "
                    "git tree: %s (%s)" % (obj.type, obj.hexsha))

    @property
    def head(self) -> str:
        return self.repo.head.hexsha

    def rev_parse(self, ref: str) -> Tuple[str, str]:
        """
        Expands named refs and tags.

        Returns: object type, object hash
        """
        obj = self.repo.rev_parse(ref)
        return obj.type, obj.hexsha

    IgnoreMode = IgnoreMode

    def ignore(self, paths: List[str], mode: Optional[IgnoreMode] = None,
            gitignore: Optional[str] = None):
        if not gitignore:
            gitignore = '.gitignore'
        repo_root = self._project_dir
        gitignore = osp.abspath(osp.join(repo_root, gitignore))
        assert gitignore.startswith(repo_root), gitignore

        _update_ignore_file(paths, repo_root=repo_root,
            mode=mode, filepath=gitignore)

    HASH_LEN = 40

    @classmethod
    def is_hash(cls, s: str) -> bool:
        return len(s) == cls.HASH_LEN

    def log(self, depth=10) -> List[str]:
        commits = []
        for commit in zip(self.repo.iter_commits(rev='HEAD'), range(depth)):
            commits.append(commit)
        return commits

class DvcWrapper:
    @staticmethod
    def import_module():
        import dvc
        import dvc.main
        import dvc.repo
        return dvc

    try:
        module = import_module.__func__()
    except ImportError:
        module = None

    def _dvc_dir(self):
        return osp.join(self._project_dir, '.dvc')

    class DvcError(Exception):
        pass

    def __init__(self, project_dir):
        self._project_dir = project_dir
        self._repo = None

        if osp.isdir(project_dir) and osp.isdir(self._dvc_dir()):
            with logging_disabled():
                self._repo = self.module.repo.Repo(project_dir)

    @property
    def initialized(self):
        return self._repo is not None

    @property
    def repo(self):
        self._repo = self.module.repo.Repo(self._project_dir)
        return self._repo

    def init(self):
        if self.initialized:
            return

        with logging_disabled():
            self._repo = self.module.repo.Repo.init(self._project_dir)

        repo_dir = osp.join(self._project_dir, '.dvc')
        _update_ignore_file([osp.join(repo_dir, 'plots')],
            filepath=osp.join(repo_dir, '.gitignore'),
            repo_root=repo_dir
        )

    def push(self, targets=None, remote=None):
        args = ['push']
        if remote:
            args.append('--remote')
            args.append(remote)
        if targets:
            if isinstance(targets, str):
                args.append(targets)
            else:
                args.extend(targets)
        self._exec(args)

    def pull(self, targets=None, remote=None):
        args = ['pull']
        if remote:
            args.append('--remote')
            args.append(remote)
        if targets:
            if isinstance(targets, str):
                args.append(targets)
            else:
                args.extend(targets)
        self._exec(args)

    def check_updates(self, targets=None, remote=None):
        args = ['fetch'] # no other way now?
        if remote:
            args.append('--remote')
            args.append(remote)
        if targets:
            if isinstance(targets, str):
                args.append(targets)
            else:
                args.extend(targets)
        self._exec(args)

    def fetch(self, targets=None, remote=None):
        args = ['fetch']
        if remote:
            args.append('--remote')
            args.append(remote)
        if targets:
            if isinstance(targets, str):
                args.append(targets)
            else:
                args.extend(targets)
        self._exec(args)

    def import_repo(self, url, path, out=None, dvc_path=None, rev=None,
            download=True):
        args = ['import']
        if dvc_path:
            args.append('--file')
            args.append(dvc_path)
            os.makedirs(osp.dirname(dvc_path), exist_ok=True)
        if rev:
            args.append('--rev')
            args.append(rev)
        if out:
            args.append('-o')
            args.append(out)
        if not download:
            args.append('--no-exec')
        args.append(url)
        args.append(path)
        self._exec(args)

    def import_url(self, url, out=None, dvc_path=None, download=True):
        args = ['import-url']
        if dvc_path:
            args.append('--file')
            args.append(dvc_path)
            os.makedirs(osp.dirname(dvc_path), exist_ok=True)
        if not download:
            args.append('--no-exec')
        args.append(url)
        if out:
            args.append(out)
        self._exec(args)

    def update_imports(self, targets=None, rev=None):
        args = ['update']
        if rev:
            args.append('--rev')
            args.append(rev)
        if targets:
            if isinstance(targets, str):
                args.append(targets)
            else:
                args.extend(targets)
        self._exec(args)

    def checkout(self, targets=None):
        args = ['checkout']
        if targets:
            if isinstance(targets, str):
                args.append(targets)
            else:
                args.extend(targets)
        self._exec(args)

    def add(self, paths, dvc_path=None, no_commit=False):
        args = ['add']
        if dvc_path:
            args.append('--file')
            args.append(dvc_path)
            os.makedirs(osp.dirname(dvc_path), exist_ok=True)
        if no_commit:
            args.append('--no-commit')
        if paths:
            if isinstance(paths, str):
                args.append(paths)
            else:
                args.extend(paths)
        self._exec(args)

    def remove(self, paths, outs=False):
        args = ['remove']
        if outs:
            args.append('--outs')
        if paths:
            if isinstance(paths, str):
                args.append(paths)
            else:
                args.extend(paths)
        self._exec(args)

    def commit(self, paths):
        args = ['commit', '--recursive', '--force']
        if paths:
            if isinstance(paths, str):
                args.append(paths)
            else:
                args.extend(paths)
        self._exec(args)

    def add_remote(self, name, config):
        self._exec(['remote', 'add', name, config['url']])

    def remove_remote(self, name):
        self._exec(['remote', 'remove', name])

    def list_remotes(self):
        out = self._exec(['remote', 'list'])
        return dict(line.split() for line in out.split('\n') if line)

    def get_default_remote(self):
        out = self._exec(['remote', 'default'])
        if out == 'No default remote set' or 1 < len(out.split()):
            return None
        return out

    def set_default_remote(self, name):
        assert name and 1 == len(name.split()), "Invalid remote name '%s'" % name
        self._exec(['remote', 'default', name])

    def list_stages(self):
        return set(s.addressing for s in self.repo.stages)

    def run(self, name, cmd, deps=None, outs=None, force=False):
        args = ['run', '-n', name]
        if force:
            args.append('--force')
        for d in deps:
            args.append('-d')
            args.append(d)
        for o in outs:
            args.append('--outs')
            args.append(o)
        args.extend(cmd)
        self._exec(args, hide_output=False)

    def repro(self, targets=None, force=False, pull=False):
        args = ['repro']
        if force:
            args.append('--force')
        if pull:
            args.append('--pull')
        if targets:
            if isinstance(targets, str):
                args.append(targets)
            else:
                args.extend(targets)
        self._exec(args)

    def status(self, targets=None):
        args = ['status', '--show-json']
        if targets:
            if isinstance(targets, str):
                args.append(targets)
            else:
                args.extend(targets)
        out = self._exec(args).splitlines()[-1]
        return json.loads(out)

    @staticmethod
    def check_stage_status(data, stage, status):
        assert status in {'deleted', 'modified'}
        return status in [s
            for d in data.get(stage, []) if 'changed outs' in d
            for co in d.values()
            for s in co.values()
        ]

    def _exec(self, args, hide_output=True, answer_on_input='y'):
        contexts = ExitStack()

        args = ['--cd', self._project_dir] + args
        contexts.callback(os.chdir, os.getcwd()) # restore cd after DVC

        if answer_on_input is not None:
            def _input(*args): return answer_on_input
            contexts.enter_context(unittest.mock.patch(
                'dvc.prompt.input', new=_input))

        log.debug("Calling DVC main with args: %s", args)

        logs = contexts.enter_context(catch_logs('dvc'))

        with contexts:
            retcode = self.module.main.main(args)

        logs = logs.getvalue()
        if retcode != 0:
            raise self.DvcError(logs)
        if not hide_output:
            print(logs)
        return logs

    def is_cached(self, obj_hash):
        path = self.obj_path(obj_hash)
        if not osp.isfile(path):
            return False

        if obj_hash.endswith(self.DIR_HASH_SUFFIX):
            with open(path) as f:
                objects = json.load(f)
            for entry in objects:
                if not osp.isfile(self.obj_path(entry['md5'])):
                    return False

        return True

    def obj_path(self, obj_hash, root=None):
        assert self.is_hash(obj_hash), obj_hash
        if not root:
            root = osp.join(self._project_dir, '.dvc', 'cache')
        return osp.join(root, obj_hash[:2], obj_hash[2:])

    IgnoreMode = IgnoreMode

    def ignore(self, paths: List[str], mode: Optional[IgnoreMode] = None,
            dvcignore: Optional[str] = None):
        if not dvcignore:
            dvcignore = '.dvcignore'
        repo_root = self._project_dir
        dvcignore = osp.abspath(osp.join(repo_root, dvcignore))
        assert dvcignore.startswith(repo_root), dvcignore

        _update_ignore_file(paths, repo_root=repo_root,
            mode=mode, filepath=dvcignore)

    # This ruamel parser is needed to preserve comments,
    # order and form (if multiple forms allowed by the standard)
    # of the entries in the file. It can be reused.
    yaml_parser = yaml.YAML(typ='rt')

    @classmethod
    def get_hash_from_dvcfile(cls, path) -> str:
        with open(path) as f:
            contents = cls.yaml_parser.load(f)
        return contents['outs'][0]['md5']

    FILE_HASH_LEN = 32
    DIR_HASH_SUFFIX = '.dir'
    DIR_HASH_LEN = FILE_HASH_LEN + len(DIR_HASH_SUFFIX)

    @classmethod
    def is_file_hash(cls, s: str) -> bool:
        return len(s) == cls.FILE_HASH_LEN

    @classmethod
    def is_dir_hash(cls, s: str) -> bool:
        return len(s) == cls.DIR_HASH_LEN and s.endswith(cls.DIR_HASH_SUFFIX)

    @classmethod
    def is_hash(cls, s: str) -> bool:
        return cls.is_file_hash(s) or cls.is_dir_hash(s)

    def write_obj(self, obj_hash, dst_dir, allow_links=True):
        def _copy_obj(src, dst, link=False):
            os.makedirs(osp.dirname(dst), exist_ok=True)
            if link:
                os.link(src, dst)
            else:
                shutil.copy(src, dst, follow_symlinks=True)

        src = self.obj_path(obj_hash)
        if osp.isfile(src):
            _copy_obj(src, dst_dir, link=allow_links)
            return

        src += self.DIR_HASH_SUFFIX
        if not osp.isfile(src):
            raise UnknownRefError(obj_hash)

        with open(src) as f:
            src_meta = json.load(f)
        for entry in src_meta:
            _copy_obj(self.obj_path(entry['md5']),
                osp.join(dst_dir, entry['relpath']), link=allow_links)

    def remove_cache_obj(self, obj_hash: str):
        src = self.obj_path(obj_hash)
        if osp.isfile(src):
            os.remove(src)
            return

        src += self.DIR_HASH_SUFFIX
        if not osp.isfile(src):
            raise UnknownRefError(obj_hash)

        with open(src) as f:
            src_meta = json.load(f)
        for entry in src_meta:
            entry_path = self.obj_path(entry['md5'])
            if osp.isfile(entry_path):
                os.remove(entry_path)

        os.remove(src)

class Tree:
    # can be:
    # - attached to the work dir
    # - attached to the index dir
    # - attached to a revision

    @classmethod
    def _read_config_v1(cls, config):
        config = Config(config)
        config.remove('subsets')
        config.remove('format_version')

        raise NotImplementedError()
        config = cls._read_config_v2(config)
        if osp.isdir(osp.join(config.project_dir, config.dataset_dir)):
            name = generate_next_name(list(config.sources), 'source',
                sep='-', default='1')
            config.sources[name] = {
                'url': config.dataset_dir,
                'format': DEFAULT_FORMAT,
            }

        for s, s_conf in config.sources:
            if path and not osp.exists(path) and not config.remote:
                # backward compatibility
                path = osp.join(tree.config.project_dir, config.url)

        return config

    @classmethod
    def _read_config_v2(cls, config):
        return TreeConfig(config)

    @classmethod
    def _read_config(cls, config):
        if config:
            version = config.get('format_version')
        else:
            version = None
        if version == 1:
            return cls._read_config_v1(config)
        elif version in {None, 2}:
            return cls._read_config_v2(config)
        else:
            raise ValueError("Unknown project config file format version '%s'. "
                "The only known are: 1, 2" % version)

    def __init__(self, project: 'Project',
            config: Optional[TreeConfig] = None,
            env: Optional[Environment] = None,
            rev: Optional[str] = None):
        assert isinstance(project, Project)
        assert not rev or project.is_ref(rev), rev

        self._config = self._read_config(config)
        if env is None:
            env = Environment(self._config)
        elif config is not None:
            raise ValueError("env can only be provided when no config provided")
        self._env = env or Environment(self)
        self._project = project
        self._rev = rev

        self._sources = ProjectSources(self)
        self._models = ProjectModels(self)
        self._targets = ProjectBuildTargets(self)

    def save(self):
        self.dump(self._config.config_path)

    def dump(self, path):
        os.makedirs(osp.dirname(path), exist_ok=True)
        self._config.dump(path)

    @property
    def sources(self) -> ProjectSources:
        return self._sources

    @property
    def models(self) -> ProjectModels:
        return self._models

    @property
    def build_targets(self) -> ProjectBuildTargets:
        return self._targets

    @property
    def config(self) -> Config:
        return self._config

    @property
    def env(self) -> Environment:
        return self._env

    @property
    def rev(self) -> str:
        return self._rev

    def make_dataset(self, target: Optional[str] = None) -> IDataset:
        if target is None:
            target = 'project'

        pipeline = self.build_targets.make_pipeline(target)
        return ProjectBuilder(self._project, self).make_dataset(pipeline)

    @property
    def is_working_tree(self) -> bool:
        return not self._rev

    def source_data_dir(self, source) -> str:
        if self.is_working_tree:
            return self._project.source_data_dir(source)

        obj_hash = self.build_targets[source].head.hash
        return self._project.cache_path(obj_hash)


class Project:
    @staticmethod
    def find_project_dir(path: str) -> Optional[str]:
        if path.endswith(ProjectLayout.aux_dir) and osp.isdir(path):
            return path

        temp_path = osp.join(path, ProjectLayout.aux_dir)
        if osp.isdir(temp_path):
            return temp_path

        return None

    def __init__(self, path: Optional[str] = None):
        if not path:
            path = osp.curdir
        found_path = self.find_project_dir(path)
        if not found_path:
            raise ProjectNotFoundError("Can't find project at '%s'" % path)

        self._aux_dir = found_path
        self._root_dir = osp.dirname(found_path)

        GitWrapper.import_module()
        DvcWrapper.import_module()
        self._git = GitWrapper(self._root_dir)
        self._dvc = DvcWrapper(self._root_dir)

        self._working_tree = None
        self._head_tree = None

    def _init_vcs(self):
        # DVC requires Git to be initialized
        if not self._git.initialized:
            self._git.init()
            self._git.ignore([
                osp.join(self._aux_dir, ProjectLayout.cache_dir),
            ])
        if not self._dvc.initialized:
            self._dvc.init()
            self._dvc.ignore([
                osp.join(self._aux_dir, ProjectLayout.cache_dir),
                osp.join(self._aux_dir, ProjectLayout.tree_dir),
            ])

    @classmethod
    def init(cls, path):
        existing_project = cls.find_project_dir(path)
        if existing_project:
            raise ProjectAlreadyExists("Can't create project in '%s': " \
                "a project already exists" % path)

        if not path.endswith(ProjectLayout.aux_dir):
            path = osp.join(path, ProjectLayout.aux_dir)
        os.makedirs(path, exist_ok=True)

        os.makedirs(osp.join(path, ProjectLayout.cache_dir))
        os.makedirs(osp.join(path, ProjectLayout.tmp_dir))

        project = Project(path)
        project._init_vcs()

        return project

    @property
    def working_tree(self) -> Tree:
        if self._working_tree is None:
            self._working_tree = self.get_rev(None)
        return self._working_tree

    @property
    def head(self) -> Tree:
        if self._head_tree is None:
            self._head_tree = self.get_rev('HEAD')
        return self._head_tree

    def get_rev(self, rev: str) -> Tree:
        """
        Ref convetions:
        - None or "" - working dir
        - "<40 symbols>" - revision hash
        """

        obj_type, obj_hash = self._parse_ref(rev)
        assert obj_type == self._RefKind.tree, obj_type

        if not obj_hash:
            config_path = osp.join(self._aux_dir,
                ProjectLayout.tree_dir, TreeLayout.conf_file)
            # TODO: backward compatibility
            if osp.isfile(config_path):
                tree_config = TreeConfig.parse(config_path)
            else:
                tree_config = TreeConfig()
                os.makedirs(osp.dirname(config_path), exist_ok=True)
                tree_config.dump(config_path)
            tree_config.config_path = config_path
            tree_config.base_dir = osp.dirname(config_path)
            # TODO: adjust paths in config
            tree = Tree(config=tree_config, project=self, rev=obj_hash)
        else:
            if not self.is_rev_cached(obj_hash):
                self._materialize_rev(obj_hash)

            rev_dir = self.cache_path(obj_hash)
            tree_config = TreeConfig.parse(osp.join(rev_dir,
                TreeLayout.conf_file))
            tree_config.base_dir = rev_dir
            # TODO: adjust paths in config
            tree = Tree(config=tree_config, project=self, rev=obj_hash)
        return tree

    def is_rev_cached(self, rev: str) -> bool:
        obj_type, obj_hash = self._parse_ref(rev)
        assert obj_type == self._RefKind.tree, obj_type
        return self._is_cached(obj_hash)

    def is_obj_cached(self, obj_hash: str) -> bool:
        return self._is_cached(obj_hash) or \
            self._can_retrieve_from_vcs_cache(obj_hash)

    _RefKind = Enum('RefKind', ['tree', 'blob'])
    def _parse_ref(self, ref: str) -> Tuple[_RefKind, str]:
        if not ref: # working tree marker
            return self._RefKind.tree, ref

        try:
            obj_type, obj_hash = self._git.rev_parse(ref)
            assert obj_type == 'commit', obj_hash

            return self._RefKind.tree, obj_hash
        except Exception as e:
            if isinstance(e, AssertionError):
                raise

        try:
            assert self._dvc.is_hash(ref), ref
            return self._RefKind.blob, ref
        except Exception:
            raise UnknownRefError("Can't parse ref '%s'" % ref)

    def _materialize_rev(self, rev):
        tree = self._git.get_tree(rev)

        obj_dir = self.cache_path(tree.hexsha)
        if osp.isdir(obj_dir):
            return obj_dir

        self._git.write_tree(tree, obj_dir)
        return obj_dir

    def _is_cached(self, obj_hash):
        return osp.isdir(self.cache_path(obj_hash))

    def cache_path(self, obj_hash, root=None):
        assert self._git.is_hash(obj_hash) or self._dvc.is_hash(obj_hash), obj_hash
        if self._dvc.is_dir_hash(obj_hash):
            obj_hash = obj_hash[:self._dvc.FILE_HASH_LEN]

        if not root:
            root = osp.join(self._aux_dir, ProjectLayout.cache_dir)
        return osp.join(root, obj_hash[:2], obj_hash[2:])

    def _can_retrieve_from_vcs_cache(self, obj_hash):
        if not self._dvc.is_dir_hash(obj_hash):
            dir_check = self._dvc.is_cached(
                obj_hash + self._dvc.DIR_HASH_SUFFIX)
        else:
            dir_check = False
        return dir_check or self._dvc.is_cached(obj_hash)

    def source_data_dir(self, name: str) -> str:
        return osp.join(self._root_dir, name)

    def _source_dvcfile_path(self, name, root=None):
        if not root:
            root = osp.join(self._aux_dir, ProjectLayout.tree_dir)
        return osp.join(root, self.working_tree.config.sources_dir,
            name + '.dvc')

    def _make_tmp_dir(self, suffix=None):
        project_tmp_dir = osp.join(self._aux_dir, ProjectLayout.tmp_dir)
        os.makedirs(project_tmp_dir, exist_ok=True)
        if suffix:
            suffix = '_' + suffix
        return tempfile.TemporaryDirectory(suffix=suffix, dir=project_tmp_dir)

    def download_source(self, source: Source):
        """
        Downloads already existing source from its remote storage.
        """
        raise NotImplementedError()
        # dvc = self.dvc

        # temp_dir = make_temp_dir(
        #     osp.join(self.config.project_dir, ProjectLayout.AUX_DIR, 'temp'))
        # dvc_config = load_dvc_config(self, source)
        # dvc_config_path = osp.join(temp_dir, 'config.dvc')
        # write_dvc_config(dvc_config, )
        # dvc.download_source(dvc_config, temp_dir)

        # source.hash = dvc.compute_source_hash(temp_dir)
        # obj_dir = _make_obj_path(self, source.hash)
        # shutil.move(temp_dir, obj_dir) # moves _into_ obj_dir

    def remove_cache_obj(self, ref: str):
        obj_type, obj_hash = self._parse_ref(ref)

        if self._is_cached(obj_hash):
            rmtree(self.cache_path(obj_hash))

        if obj_type == self._RefKind.tree:
            pass
        elif obj_type == self._RefKind.blob:
            self._dvc.remove_cache_obj(obj_hash)
        else:
            raise ValueError("Unexpected object type '%s'" % obj_type)

    def validate_source_name(self, name: str):
        valid_filename = make_file_name(name)
        if valid_filename != name:
            raise ValueError("Source name contains "
                "prohibited symbols: %s" % (set(name) - set(valid_filename)) )

        if name.startswith('.'):
            raise ValueError("Source name can't start with '.'")

        reserved_names = {'dataset', 'build', 'project'}
        if name.lower() in reserved_names:
            raise ValueError("Source name is reserved for internal use")

    def _download_source(self, name, url, dst_dir, no_cache=False):
        assert url

        dvcfile = osp.join(dst_dir, name + '.dvc')
        data_dir = osp.join(dst_dir, 'data')

        if osp.isdir(url):
            shutil.copytree(url, data_dir)
        else:
            os.makedirs(data_dir, exist_ok=True)
            shutil.copy(url, data_dir)
        self._dvc.add(data_dir, dvc_path=dvcfile, no_commit=no_cache)

        obj_hash = self._dvc.get_hash_from_dvcfile(dvcfile)
        if obj_hash.endswith(self._dvc.DIR_HASH_SUFFIX):
            obj_hash = obj_hash[:-len(self._dvc.DIR_HASH_SUFFIX)]

        return {
            'url': url,
            'hash': obj_hash,
        }, dvcfile, data_dir

    def _refresh_source_hash(self, source: str) -> str:
        source_dir = self.source_data_dir(source)

        if not osp.isdir(source_dir):
            return None

        with self._make_tmp_dir() as tmp_dir:
            tmp_dvcfile = osp.join(tmp_dir, 'obj.dvc')
            self._dvc.add(source_dir, dvc_path=tmp_dvcfile, no_commit=True)

            obj_hash = self._dvc.get_hash_from_dvcfile(tmp_dvcfile)
            obj_hash = obj_hash[:-len(self._dvc.DIR_HASH_SUFFIX)]

            dvcfile = self._source_dvcfile_path(source)
            os.replace(tmp_dvcfile, dvcfile)

        return obj_hash

    def _materialize_obj(self, obj_hash: str):
        if not self._can_retrieve_from_vcs_cache(obj_hash):
            raise MissingObjectError(obj_hash)

        dst_dir = self.cache_path(obj_hash)
        if osp.isdir(dst_dir):
            return dst_dir

        self._dvc.write_obj(obj_hash, dst_dir, allow_links=True)
        return dst_dir

    def import_source(self, name: str, url: Optional[str],
            format: str, options: Optional[Dict] = None,
            no_cache: bool = False) -> Source:
        """
        Adds a new source to the working directory of the project.

        Options:
        no_cache (bool) - download the source, but don't put data into cache.
            Can be used to reduce storage size.

        Returns: the new source config
        """

        self.validate_source_name(name)

        if name in self.working_tree.sources:
            raise SourceExistsError("Source '%s' already exists" % name)

        data_dir = self.source_data_dir(name)
        if osp.exists(data_dir):
            if os.listdir(data_dir):
                raise FileExistsError("Source directory '%s' already exists" % \
                    data_dir)
            os.rmdir(data_dir)

        config = Source({
            'url': url,
            'format': format,
            'options': options or {},
        })

        if not url:
            # a generated source
            pass
        else:
            # add a source
            url = osp.abspath(url)
            if not osp.exists(url):
                raise FileNotFoundError(url)

            with self._make_tmp_dir(suffix=name) as tmp_dir:
                config_update, tmp_dvcfile, tmp_data_dir = \
                    self._download_source(name, url, tmp_dir, no_cache=no_cache)
                self._git.ignore([data_dir])
                shutil.move(tmp_data_dir, data_dir)

                dvcfile = self._source_dvcfile_path(name)
                os.makedirs(osp.dirname(dvcfile), exist_ok=True)
                os.replace(tmp_dvcfile, dvcfile)

            config.update(config_update)

        config = self.working_tree.sources.add(name, config)
        target = self.working_tree.build_targets.add_target(name)
        target.root.hash = config.hash

        self.working_tree.save()

        return config

    def remove_source(self, name: str, force: bool = False,
            keep_data: bool = True):
        """Force - ignores errors and tries to wipe remaining data"""

        if name not in self.working_tree.sources and not force:
            raise KeyError("Unknown source '%s'" % name)

        self.working_tree.sources.remove(name)

        if not keep_data:
            data_dir = self.source_data_dir(name)
            if osp.isdir(data_dir):
                rmtree(data_dir)

        dvcfile = self._source_dvcfile_path(name)
        if osp.isfile(dvcfile):
            try:
                os.remove(dvcfile)
            except Exception:
                if not force:
                    raise

        self.working_tree.build_targets.remove_target(name)

        self._git.ignore([data_dir], mode='remove')

    def commit(self, message: str, no_cache: bool = False) -> str:
        """
        Copies tree and objects from the working dir to the cache.
        Creates a new commit. Moves the HEAD pointer to the new commit.

        Options:
        no_cache (bool) - don't put added dataset data into cache,
            store only metainfo. Can be used to reduce storage size.

        Returns: the new commit hash
        """

        # TODO: add check for empty commit

        for s in self.working_tree.sources:
            source_dir = self.source_data_dir(s)

            with self._make_tmp_dir(suffix=s) as tmp_dir:
                tmp_dvcfile = osp.join(tmp_dir, s + '.dvc')

                self._dvc.add(source_dir, dvc_path=tmp_dvcfile,
                    no_commit=no_cache)

                obj_hash = self._dvc.get_hash_from_dvcfile(tmp_dvcfile)
                obj_hash = obj_hash[:-len(self._dvc.DIR_HASH_SUFFIX)]
                if obj_hash != self.working_tree.build_targets[s].head.hash:
                    # TODO: compute a patch and a new stage
                    log.warning("Commit: The source '%s' has been changed "
                        "without Datumaro means. It will be saved, but it will "
                        "only be available for reproduction from the cache.",
                        s)
                    self.working_tree.build_targets[s].head.hash = obj_hash

                dvcfile = self._source_dvcfile_path(s)
                os.makedirs(osp.dirname(dvcfile), exist_ok=True)
                os.replace(tmp_dvcfile, dvcfile)

        tree_dir = osp.join(self._aux_dir, ProjectLayout.tree_dir)
        self.working_tree.save()
        self._git.add(tree_dir, base=tree_dir)
        head = self._git.commit(message)

        shutil.copytree(tree_dir, self.cache_path(head))

        self._head_tree = None

        return head

    @staticmethod
    def _copy_dvc_dir(src_dir, dst_dir):
        for name in ['config', '.gitignore']:
            os.replace(osp.join(src_dir, name), osp.join(dst_dir, name))

    def checkout(self, rev: Optional[str] = None,
            targets: Union[None, str, List[str]] = None):
        """
        Copies tree and objects from cache to working tree.

        Sets HEAD to the specified revision, unless targets specified.
        When targets specified, only copies objects from cache to working tree.
        """

        assert targets is None or isinstance(targets, (str, list)), targets
        if targets:
            raise NotImplementedError()

            if isinstance(targets, str):
                targets = [targets]

            for i, t in enumerate(targets):
                if not osp.exists(t):
                    targets[i] = self.dvc_filepath(t)

            # order matters
            self._git.checkout(rev, targets)
            self._dvc.checkout(targets)
        else:
            # Check working tree for unsaved changes,
            # set HEAD to the revision
            # write revision tree to working tree
            tree_dir = osp.join(self._aux_dir, ProjectLayout.tree_dir)
            self._git.checkout(rev, dst_dir=tree_dir)
            self._copy_dvc_dir(osp.join(tree_dir, '.dvc'),
                               osp.join(self._root_dir, '.dvc'))

            self._working_tree = None

            # Restore sources from the commit.
            # Work with the working tree instead of cache, to
            # avoid extra memory use from materializing
            # the head commit sources in the cache
            rev_tree = self.working_tree
            with self._make_tmp_dir(suffix='co_%s' % rev) as tmp_dir:
                dvcfiles = []

                for t in rev_tree.build_targets:
                    if t == rev_tree.build_targets.MAIN_TARGET:
                        continue

                    dvcfile = self._source_dvcfile_path(t)

                    # Fix dvcfile wdir to avoid writing to an unexpected places
                    tmp_dvcfile = osp.join(tmp_dir, t + '.dvc')
                    with open(dvcfile) as f:
                        conf = self._dvc.yaml_parser.load(f)
                    conf['wdir'] = self._root_dir
                    with open(tmp_dvcfile, 'w') as f:
                        self._dvc.yaml_parser.dump(conf, f)

                    dvcfiles.append(tmp_dvcfile)

                self._dvc.checkout(dvcfiles)

        self._working_tree = None

    def is_ref(self, ref: str) -> bool:
        return self._git.is_ref(ref)

    def has_commits(self) -> bool:
        return self._git.has_commits()

    @classmethod
    def from_dataset(cls, path: str, dataset_format: Optional[str] = None,
            env: Optional[Environment] = None, **format_options) -> 'Project':
        """
        A convenience function to create a project from a given dataset.
        """
        raise NotImplementedError()

        if env is None:
            env = Environment()

        if not dataset_format:
            matches = env.detect_dataset(path)
            if not matches:
                raise DatumaroError(
                    "Failed to detect dataset format automatically")
            if 1 < len(matches):
                raise DatumaroError(
                    "Failed to detect dataset format automatically:"
                    " data matches more than one format: %s" % \
                    ', '.join(matches))
            dataset_format = matches[0]
        elif not env.is_format_known(dataset_format):
            raise KeyError("Unknown format '%s'. To make it "
                "available, add the corresponding Extractor implementation "
                "to the environment" % dataset_format)

        project = Project(env=env)
        project.sources.add('source', {
            'url': path,
            'format': dataset_format,
            'options': format_options,
        })
        return project

    def status(self) -> Dict:
        return {}

    def revs(self, max_count=10) -> List[str]:
        return [(c.hexsha, c.message) for c, _ in self._git.log(max_count)]


def load_project_as_dataset(url):
    return Project(url).work_dir.make_dataset()

def parse_target_revpath(revpath: str):
    sep_pos = revpath.find(':')
    if -1 < sep_pos:
        rev = revpath[:sep_pos]
        target = revpath[sep_pos:]
    else:
        rev = ''
        target = revpath

    return rev, target
